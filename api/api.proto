syntax = "proto3";

import "google/protobuf/empty.proto";

import "config.proto";

/* Commands sent by the client */
enum BrewTargetMode {
  POWER = 0;
  PRESSURE = 1;
}
message BrewTarget {
  BrewTargetMode mode = 1;
  uint32 value = 2;
}

message PowerOn {}
message PowerOff {}

message StartBrew {
  // The desired pressure in millibar
  uint32 pressure = 1;
}
message StopBrew {}

message StartPump {}
message StopPump {}

message StartSteam {}
message StopSteam {}

message BackflushStart {}
message BackflushStop {}

message RinseStart {}
message RinseStop {}

message SetpointSet { uint32 setpoint = 1; }

message Command {
  // A unique client-generated request identifier.
  // This will be embedded into a command response coming from the server
  // so the client can route the response appropriately.
  bytes request_id = 1;

  oneof command_oneof {
    PowerOn power_on = 2;
    PowerOff power_off = 3;

    StartBrew start_brew = 4;
    StopBrew stop_brew = 5;

    StartPump start_pump = 6;
    StopPump stop_pump = 7;

    StartSteam start_steam = 8;
    StopSteam stop_steam = 9;

    // Set the configuration
    Config config = 10;

    BackflushStart backflush_start = 11;
    BackflushStop backflush_stop = 12;

    RinseStart rinse_start = 13;
    RinseStop rinse_stop = 14;

    BrewTarget brew_target_set = 15;

    SetpointSet setpoint_set = 16;
  }
};

/* Events sent by the server */

enum MachineMode {
  UNKNOWN = 0;
  PANIC = 1;
  OFF = 2;
  IDLE = 3;
  BREWING = 4;
  BACKFLUSHING = 5;
  PUMPING = 6;
  STEAMING = 7;
  RINSING = 8;
}

// The shot timer requires the caller to do a bit of maths to get the actual
// shot time in milliseconds:
//
// if (StateUpdate.mode == MachineMode.BREWING) {
//   return (StateUpdate.millis - ShotTimer.start)
// } else {
//   return (ShotTimer.stop - ShotTimer.start)
// }
//
// Start/Stop could also be used together with StateUpdate.millis to establish
// _when_ the last shot was pulled.
message ShotTimer {
  uint32 start = 1;
  uint32 stop = 2;
}

message StateUpdate {
  MachineMode mode = 1;
  int32 boilerTemp = 2;
  uint32 pressure = 3;
  int32 setpoint = 4;

  // Current time of machine since startup in milliseconds
  // as returned by the Arduino function millis().
  //
  // This is intended to be used for a client to synchronise time with
  // the server so it can make sense of things like shot timers
  // which aren't expressed as a straight up count but as timestamps.
  //
  // This number can also be used to display the uptime of the machine.
  uint32 millis = 5;

  ShotTimer shot_timer = 6;
  BrewTarget brew_target = 7;

  string panic_reason = 8;
}

message LogMessage {
  enum LogLevel {
    ERROR = 0;
    INFO = 1;
    DEBUG = 2;
  }
  LogLevel logLevel = 1;
  string msg = 2;
}

message Response {
  bytes request_id = 1;

  // Responses to requests
  oneof resp_oneof {
    google.protobuf.Empty OK = 2;
    string error = 3;
  }
}

message Event {
  oneof event_oneof {
    // Contains the current state of the machine
    StateUpdate state_update = 1;

    // Get updated configuration
    Config config = 2;

    // // Generic log message
    // LogMessage log = 3;

    // Responses to requests
    Response resp = 4;
  }
}
