syntax = "proto3";

import "config.proto";

/* Commands sent by the client */

message PowerOn {
  // Setpoint represented as a hundredth of a degree celsius
  // i.e. you'll get the real decimal representation by multiplying
  // this number by 100.
  int32 setpoint = 1;
}
message PowerOff { }

message StartBrew { }
message StopBrew { }

message StartPump { }
message StopPump { }

message StartSteam {
  // Setpoint represented as a hundredth of a degree celsius
  // i.e. you'll get the real decimal representation by multiplying
  // this number by 100.
  int32 setpoint = 1;
}
message StopSteam { }

message BackflushStart { }
message BackflushStop { }

message Command {
  // A unique client-generated request identifier.
  // This will be embedded into a command response coming from the server
  // so the client can route the response appropriately.
  bytes request_id = 1;

  oneof command_oneof {
    PowerOn power_on = 2;
    PowerOff power_off = 3;

    StartBrew start_brew = 4;
    StopBrew stop_brew = 5;

    StartPump start_pump = 6;
    StopPump stop_pump = 7;

    StartSteam start_steam = 8;
    StopSteam stop_steam = 9;

    // Set the configuration
    Config config = 10;

    BackflushStart backflush_start = 11;
    BackflushStop backflush_stop = 12;
  }
};

/* Events sent by the server */

// An envelope for an arbitrary sensor that returns a float with an optional error
message FloatSensorReading {
  oneof value_or_error {
    double value = 1;
    string error = 2;
  }
};

message StateUpdate {
  // TODO: Communicate mode via an enum
  bool is_on = 1;
  bool is_brewing = 2;
  bool is_pumping = 3;
  bool is_steaming = 4;
  FloatSensorReading boilerTemp = 5;
  FloatSensorReading pressure = 6;
  int32 setpoint = 7;
}

message LogMessage {
  enum LogLevel{
    ERROR = 0;
    INFO = 1;
    DEBUG = 2;
  }
  LogLevel logLevel = 1;
  string msg = 2;
}

message Event {
  // If this event was in response to a request id it will contain one, otherwise empty
  bytes request_id = 1;

  oneof event_oneof {
    // Contains the current state of the machine
    StateUpdate state_update = 2;

    // Get updated configuration
    Config config = 3;

    // Generic log message
    LogMessage log = 4;
  }
}
